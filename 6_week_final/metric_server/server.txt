import asyncio


class ClientServerProtocol(asyncio.Protocol):
    def __init__(self, metrics):
        #super().__init__()
        self.metrics = metrics

    def connection_made(self, transport):
        self.transport = transport
        print(self.transport)

    def data_received(self, data):
        resp = self.process_data(data.decode())
        self.transport.write(resp.encode())

    def process_data(self, data):
        return data

def run_server(host, port):
    metrics = {'a':'b'}
    loop = asyncio.get_event_loop()
    coro = loop.create_server(lambda: ClientServerProtocol(metrics), host, port)
    server = loop.run_until_complete(coro)
    try:
        loop.run_forever()
    except KeyboardInterrupt:
        pass
    server.close()
    loop.run_until_complete(server.wait_closed())
    loop.close()

HOST = 'localhost'
PORT = 10002
run_server(HOST, PORT)


